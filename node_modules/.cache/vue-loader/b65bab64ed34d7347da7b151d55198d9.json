{"remainingRequest":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue?vue&type=template&id=4bad71cf&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue","mtime":1753252295668},{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Disenio_Planeacion_Formulacion_Proyectos/U3_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}